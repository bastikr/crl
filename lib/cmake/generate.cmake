cmake_minimum_required(VERSION 3.14)

function(write_header_intro target_name target_path)
    file(WRITE "${target_path}"
"// Generated by crl
#pragma once

#include <crl/crl.h>
#include <crl/utils/string_literal.h>

#include <span>
#include <string_view>

namespace ${target_name} {

template <crl::StringLiteral Path> struct File;

template <crl::StringLiteral Path>
std::span<const std::byte, File<Path>::CONTENT.size()> get() {
    return std::span{File<Path>::CONTENT};
}
"
    )
endfunction()

function(write_header_outro target_name target_path)
    file(APPEND "${target_path}"
"const crl::DirectoryEntry& root();

std::optional<std::span<const std::byte>> get_file(std::string_view path);
std::optional<std::span<const std::byte>> get_filev(std::span<std::string_view> path);

} // namespace ${target_name}
"
    )
endfunction()

function(write_cpp_intro target_name target_path)
    file(WRITE "${target_path}"
"// Generated by crl
#include <${target_name}.h>

#include <crl/crl.h>
#include <crl/crlv.h>

#include <array>
#include <cstddef>

using crl::DirectoryEntry;
using crl::FileEntry;

template<typename... Ts>
constexpr std::array<const std::byte, sizeof...(Ts)> make_bytes(Ts&&... args) noexcept {
    return{std::byte(std::forward<Ts>(args))...};
}

namespace ${target_name} {
")
endfunction()

function(write_cpp_outro target_name target_path)
    file(APPEND "${target_path}"
"
const crl::DirectoryEntry& root() {
    return DIRECTORY_ROOT;
}

std::optional<std::span<const std::byte>> get_file(std::string_view path) {
    return crl::get_file(root(), path);
}

std::optional<std::span<const std::byte>> get_filev(std::span<std::string_view> path) {
    return crl::get_filev(root(), path);
}

} // namespace ${target_name}
")
endfunction()

function(write_data_array input_path index target_path out_size)
    file(READ "${input_path}" file_content HEX)
    string(LENGTH "${file_content}" data_length_hex)
    math(EXPR data_length_bytes "${data_length_hex} / 2")
    file(APPEND "${target_path}" "constexpr std::array<const std::byte, FILE_${index}_SIZE> FILE_${index}_DATA = make_bytes(")

    if(data_length_bytes GREATER 0)
        if(data_length_bytes GREATER 1)
            math(EXPR data_length_bytes_minus_two "${data_length_bytes} - 2")
            foreach(i RANGE 0 ${data_length_bytes_minus_two})
                math(EXPR index "2 * ${i}")
                string(SUBSTRING "${file_content}" ${index} 2 BYTE_HEX)
                file(APPEND "${target_path}" "0x${BYTE_HEX},")
            endforeach()
        endif()
        math(EXPR index "2 * ${data_length_bytes} - 2")
        string(SUBSTRING "${file_content}" ${index} 2 BYTE_HEX)
        file(APPEND "${target_path}" "0x${BYTE_HEX}")
    endif()
    file(APPEND "${target_path}" ");\n")
    set(${out_size} "${data_length_bytes}" PARENT_SCOPE)
endfunction()

function(write_file_entry file_index file_path target_path)
    cmake_path(GET file_path FILENAME file_name)
    file(APPEND
        "${target_path}"
        "constexpr FileEntry FILE_${file_index} = { \"${file_name}\", FILE_${file_index}_DATA };\n\n"
    )
endfunction()

function(write_file_entries base_dir resource_files target_path out_resource_sizes)
    set(index 0)
    foreach(resource_file IN LISTS resource_files)
        set(absolute_resource_file "${base_dir}/${resource_file}")
        message(STATUS "Embed ${resource_file} into ${target_path}")
        set(resource_size 0)
        write_data_array("${absolute_resource_file}" "${index}" "${target_path}" resource_size)
        list(APPEND resource_sizes "${resource_size}")
        write_file_entry("${index}" "${resource_file}" "${target_path}")
        math(EXPR index "${index} + 1")
    endforeach()
    set(${out_resource_sizes} "${resource_sizes}" PARENT_SCOPE)
endfunction()

function(write_header_file_entries resource_files resource_sizes target_path)
    set(index 0)
    foreach(resource_file IN LISTS resource_files)
        list(GET resource_sizes ${index} resource_size)
        file(APPEND
             "${target_path}"
"
constexpr crl::StringLiteral FILE_${index}_PATH = \"${resource_file}\";
constexpr size_t FILE_${index}_SIZE = ${resource_size};
extern const std::array<const std::byte, FILE_${index}_SIZE> FILE_${index}_DATA;
template <> struct File<FILE_${index}_PATH> {
    static constexpr auto &CONTENT = FILE_${index}_DATA;
};

"
)
        math(EXPR index "${index} + 1")
    endforeach()
endfunction()

function (add_directory_to_directory_list candidate directory_list out)
    list(FIND directory_list "${candidate}" pos)
    if("${candidate}" IN_LIST directory_list)
    else()
        list(APPEND directory_list "${candidate}")
        set(${out} "${directory_list}" PARENT_SCOPE)
    endif()
endfunction()

function (expand_directories_for_single_file relative_file_path directory_list out)
    get_filename_component(dir_path "${relative_file_path}" DIRECTORY)
    if("${dir_path}" STREQUAL "${relative_file_path}")
        message("Skip file ${dir_path}")
        return()
    endif()
    string(REPLACE "/" ";" dir_part_list "${dir_path}")
    foreach(dir_part IN LISTS dir_part_list)
        set(dir "${dir}/${dir_part}")
        add_directory_to_directory_list("${dir}" "${directory_list}" x)
        set(directory_list "${x}")
    endforeach()
    set(${out} "${directory_list}" PARENT_SCOPE)
endfunction()

function (expand_directories relative_file_list out)
    foreach(relative_file IN LISTS relative_file_list)
        expand_directories_for_single_file("${relative_file}" "${directory_list}" x)
        set(directory_list "${x}")
    endforeach()
    set(${out} "${directory_list}" PARENT_SCOPE)
endfunction()

function(find_children dir expanded_dirs out)
    foreach(candidate IN LISTS "${expanded_dirs}")
        cmake_path(GET candidate PARENT_PATH x)
        if ("${x}" STREQUAL "${dir}")
            list(APPEND result ${candidate})
        endif()
    endforeach()
    set(${out} ${result} PARENT_SCOPE)
endfunction()

function(write_directory_subdirectories dir dir_index subdirectories resource_directories target_file)
    list(LENGTH subdirectories subdirs_length)
    file(APPEND "${target_file}" "constexpr std::array<const DirectoryEntry*, ${subdirs_length}> DIRECTORY_${dir_index}_SUBDIRECTORIES = {")
    foreach(subdir IN LISTS subdirectories)
        list(FIND resource_directories "${subdir}" index)
        if (${index} EQUAL -1)
            message(FATAL_ERROR "Internal error: directory '${subdir}' is not part of the resource directories: '${resource_directories}'")
        endif()
        file(APPEND "${target_file}" "&DIRECTORY_${index},")
    endforeach()
    file(APPEND "${target_file}" "};\n")
endfunction()

function(write_directory_subfiles dir dir_index subfiles resource_files target_file)
    list(LENGTH subfiles subfiles_length)
    file(APPEND "${target_file}" "constexpr std::array<const FileEntry*, ${subfiles_length}> DIRECTORY_${dir_index}_SUBFILES = {")
    foreach(subfile IN LISTS subfiles)
        list(FIND resource_files "${subfile}" index)
        if (${index} EQUAL -1)
            message(FATAL_ERROR "Internal error: file '${subfile}' is not part of the resource files: '${resource_files}'")
        endif()
        file(APPEND "${target_file}" "&FILE_${index},")
    endforeach()
    file(APPEND "${target_file}" "};\n")
endfunction()

function(write_directory_entries resource_files resource_directories target_file)
    list(REVERSE resource_directories)
    foreach(dir IN LISTS resource_directories)
        list(FIND resource_directories "${dir}" dir_index)
        if (${dir_index} EQUAL -1)
            message(FATAL_ERROR "Internal error: directory '${dir}' is not part of the resource directories: '${resource_directories}'")
        endif()
        find_children("${dir}" resource_directories subdirs)
        STRING(REGEX REPLACE "^/" "" dir_without_leading_slash "${dir}")
        find_children("${dir_without_leading_slash}" resource_files subfiles)
        write_directory_subdirectories("${dir}" "${dir_index}" "${subdirs}" "${resource_directories}" "${target_file}")
        write_directory_subfiles("${dir}" "${dir_index}" "${subfiles}" "${resource_files}" "${target_file}")
        cmake_path(GET dir FILENAME dir_name)
        file(APPEND "${target_file}" "constexpr DirectoryEntry DIRECTORY_${dir_index} = { \"${dir_name}\", DIRECTORY_${dir_index}_SUBDIRECTORIES, DIRECTORY_${dir_index}_SUBFILES };\n\n")
    endforeach()
    find_children("/" resource_directories subdirs)
    find_children("" resource_files subfiles)
    write_directory_subdirectories("${dir}" "ROOT" "${subdirs}" "${resource_directories}" "${target_file}")
    write_directory_subfiles("${dir}" "ROOT" "${subfiles}" "${resource_files}" "${target_file}")
    file(APPEND "${target_file}" "constexpr DirectoryEntry DIRECTORY_ROOT = { \"\", DIRECTORY_ROOT_SUBDIRECTORIES, DIRECTORY_ROOT_SUBFILES };\n\n")
endfunction()

function(main)
    if(NOT IS_DIRECTORY "${SOURCE_DIR}")
        message(FATAL_ERROR "The source directory '${SOURCE_DIR}' provided for the resource library does not exist.")
    endif()
    file(GLOB_RECURSE resource_files RELATIVE "${SOURCE_DIR}" "${SOURCE_DIR}/*")
    expand_directories("${resource_files}" resource_directories)

    set(output_cpp_file "src/${TARGET_NAME}.cpp")
    set(output_h_file "include/${TARGET_NAME}.h")

    write_cpp_intro("${TARGET_NAME}" "${output_cpp_file}")
    write_file_entries("${SOURCE_DIR}" "${resource_files}" "${output_cpp_file}" resource_sizes)
    write_directory_entries("${resource_files}" "${resource_directories}" "${output_cpp_file}")
    write_cpp_outro("${TARGET_NAME}" "${output_cpp_file}")

    write_header_intro("${TARGET_NAME}" "${output_h_file}")
    write_header_file_entries("${resource_files}" "${resource_sizes}" "${output_h_file}")
    write_header_outro("${TARGET_NAME}" "${output_h_file}")
endfunction()

main()
